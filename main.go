package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"

	"github.com/chzyer/readline"
	"github.com/nicewook/sptfy/internal/config"
	"github.com/sashabaranov/go-openai"
	"github.com/zmb3/spotify/v2"
	spotifyauth "github.com/zmb3/spotify/v2/auth"
)

func getReadline() *readline.Instance {
	rl, err := readline.NewEx(&readline.Config{
		Prompt:          "",
		InterruptPrompt: "^C",
		EOFPrompt:       "exit",
	})
	if err != nil {
		log.Fatal(err)
	}

	return rl
}

func main() {
	log.Println("sptfy")
	cfg, err := config.LoadConfig()
	if err != nil {
		log.Fatal(err)
	}
	_ = cfg

	client = openai.NewClient(cfg.OpenAIAPIKey)
	rl := getReadline()
	defer rl.Close()
	rl.CaptureExitSignal()

	for {
		prompt, err := rl.Readline()
		if err == readline.ErrInterrupt {
			if len(prompt) == 0 {
				break
			} else {
				continue
			}
		} else if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatal(err)
		}
		functionCall := generatePlaylist(prompt, 8)
		added := addPlaylistToSpotify(cfg, functionCall)
		if added {
			fmt.Println("added")
			continue
		}
		fmt.Println("failed to add")
	}

}

type Song struct {
	Song   string `json:"song"`
	Artist string `json:"artist"`
}

type Playlist struct {
	Playlist []Song `json:"playlist"`
}

// redirectURI is the OAuth redirect URI for the application.
// You must register an application at Spotify's developer portal
// and enter this value.
const redirectURI = "http://localhost:9999/callback"

var (
	auth  *spotifyauth.Authenticator
	ch    = make(chan *spotify.Client)
	state = "abc123"
)

func completeAuth(w http.ResponseWriter, r *http.Request) {
	tok, err := auth.Token(r.Context(), state, r)
	if err != nil {
		http.Error(w, "Couldn't get token", http.StatusForbidden)
		log.Fatal(err)
	}
	if st := r.FormValue("state"); st != state {
		http.NotFound(w, r)
		log.Fatalf("State mismatch: %s != %s\n", st, state)
	}

	// use the token to get an authenticated client
	log.Println("token:", tok)
	client := spotify.New(auth.Client(r.Context(), tok))
	fmt.Fprintf(w, "Login Completed!")
	ch <- client
}

func addPlaylistToSpotify(cfg config.Config, functionCall *openai.FunctionCall) (added bool) {

	// first start an HTTP server
	http.HandleFunc("/callback", completeAuth)
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		log.Println("Got request for:", r.URL.String())
	})
	go func() {
		err := http.ListenAndServe(":9999", nil)
		if err != nil {
			log.Fatal(err)
		}
	}()

	auth = spotifyauth.New(
		spotifyauth.WithClientID(cfg.SpotifyClientID),
		spotifyauth.WithClientSecret(cfg.SpotifyClientSecret),
		spotifyauth.WithRedirectURL(redirectURI),
		spotifyauth.WithScopes(spotifyauth.ScopePlaylistModifyPublic),
	)

	url := auth.AuthURL(state)
	fmt.Println("Please log in to Spotify by visiting the following page in your browser:", url)

	// wait for auth to complete
	client := <-ch

	// use the client to make calls that require authorization
	user, err := client.CurrentUser(context.Background())
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("You are logged in as:", user.ID)

	ctx := context.Background()
	var playlist Playlist
	if err := json.Unmarshal([]byte(functionCall.Arguments), &playlist); err != nil {
		log.Println("err:", err)
		return false
	}
	var ids []spotify.ID
	for _, song := range playlist.Playlist {
		// https://developer.spotify.com/documentation/web-api/reference/#/operations/search
		advancdQuery := fmt.Sprintf("artist:%s track:%s", song.Song, song.Artist)
		basicQuery := fmt.Sprintf("%s %s", song.Song, song.Artist)

		for _, query := range []string{advancdQuery, basicQuery} {
			log.Println("search query:", query)
			// search for albums with the name Sempiternal
			results, err := client.Search(ctx, query, spotify.SearchTypeTrack)
			if err != nil {
				log.Fatal(err)
			}
			if len(results.Tracks.Tracks) == 0 || results.Tracks.Tracks[0].Popularity < 20 {
				continue
			}
			myTrack := results.Tracks.Tracks[0]
			fmt.Printf("fount %s, id: %s", myTrack.Name, myTrack.ID)
			log.Printf("%+v", results)
			ids = append(ids, myTrack.ID)

		}
	}

	createdPlaylist, err := client.CreatePlaylistForUser(
		ctx,
		user.ID,
		"my playlist by GPT",
		"generated by GPT",
		true,
		false,
	)
	if err != nil {
		log.Fatal(err)
	}
	snapshotID, err := client.AddTracksToPlaylist(ctx, createdPlaylist.ID, ids...)
	if err != nil {
		log.Fatal(err)
	}
	log.Println("snapshotID:", snapshotID)
	return true
}

// this can be not used?
// func redirectHandler(w http.ResponseWriter, r *http.Request) {
// 	// use the same state string here that you used to generate the URL
// 	token, err := auth.Token(r.Context(), state, r)
// 	if err != nil {
// 		http.Error(w, "Couldn't get token", http.StatusNotFound)
// 		return
// 	}
// 	// create a client using the specified token
// 	client := spotify.New(auth.Client(r.Context(), token))

// 	// the client can now be used to make authenticated requests
// }

func generatePlaylist(prompt string, num int) *openai.FunctionCall {
	log.Println("qurate play list")
	// exampleResponse := `
	// {
	// 	"songs": [
	// 		{"song": "Everybody Hurts", "artist": "R.E.M."},
	// 		{"song": "Nothing Compares 2 U", "artist": "Sinead O'Connor"},
	// 		{"song": "Tears in Heaven", "artist": "Eric Clapton"},
	// 		{"song": "Hurt", "artist": "Johnny Cash"},
	// 		{"song": "Yesterday", "artist": "The Beatles"}
	// 	]
	// }
	// `
	messages := []openai.ChatCompletionMessage{
		{
			Role: openai.ChatMessageRoleSystem, Content: `You are a helpful playlist generating assistant. 
					You should generate a list of songs and their artists according to a text prompt.
					`,
		},
		// {Role: openai.ChatMessageRoleUser, Content: "Generate a playlist of 5 songs based on this prompt: super super sad songs"},
		// {Role: openai.ChatMessageRoleAssistant, Content: exampleResponse},
		{Role: openai.ChatMessageRoleUser, Content: fmt.Sprintf("Generate a playlist of %d songs based on this prompt: %s", num, prompt)},
	}

	resp, err := chatComplete(messages)
	if err != nil {
		log.Fatal(err)
	}
	log.Println("got it")
	log.Println("len choice:", len(resp.Choices))
	if len(resp.Choices) <= 0 && resp.Choices[0].Message.FunctionCall == nil {
		log.Println("fail to call function")
		return nil
	}

	fmt.Printf("function name to call: %+v\n", resp.Choices[0].Message.FunctionCall.Name)
	fmt.Printf("playlilst:\n %+v\n", resp.Choices[0].Message.FunctionCall.Arguments)

	// call function
	return resp.Choices[0].Message.FunctionCall
}
